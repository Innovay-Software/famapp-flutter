//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//
// @dart=2.18

// ignore_for_file: unused_element, unused_import
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: constant_identifier_names
// ignore_for_file: lines_longer_than_80_chars

part of openapi.api;


class FolderFileUploadApi {
  FolderFileUploadApi([ApiClient? apiClient]) : apiClient = apiClient ?? defaultApiClient;

  final ApiClient apiClient;

  /// Folder file chunk upload
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [int] folderId (required):
  ///
  /// * [String] hasMore (required):
  ///   Are there more chunks, use string, \"1\" and \"0\" for true/false
  ///
  /// * [String] filename (required):
  ///   File original name
  ///
  /// * [String] chunkIndex (required):
  ///   The index of current chunk
  ///
  /// * [String] uploadId (required):
  ///   Id generated by server side (by calling the appropriate api endpoint)
  ///
  /// * [String] acceptLanguage:
  ///   Accepted language from client side
  Future<Response> folderFileChunkUploadPathWithHttpInfo(int folderId, String hasMore, String filename, String chunkIndex, String uploadId, { String? acceptLanguage, }) async {
    // ignore: prefer_const_declarations
    final path = r'/api/v2/folder-files/chunk-upload-folder-file/{folderId}'
      .replaceAll('{folderId}', folderId.toString());

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (acceptLanguage != null) {
      headerParams[r'Accept-Language'] = parameterToString(acceptLanguage);
    }
    headerParams[r'HasMore'] = parameterToString(hasMore);
    headerParams[r'Filename'] = parameterToString(filename);
    headerParams[r'ChunkIndex'] = parameterToString(chunkIndex);
    headerParams[r'UploadId'] = parameterToString(uploadId);

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Folder file chunk upload
  ///
  /// Parameters:
  ///
  /// * [int] folderId (required):
  ///
  /// * [String] hasMore (required):
  ///   Are there more chunks, use string, \"1\" and \"0\" for true/false
  ///
  /// * [String] filename (required):
  ///   File original name
  ///
  /// * [String] chunkIndex (required):
  ///   The index of current chunk
  ///
  /// * [String] uploadId (required):
  ///   Id generated by server side (by calling the appropriate api endpoint)
  ///
  /// * [String] acceptLanguage:
  ///   Accepted language from client side
  Future<void> folderFileChunkUploadPath(int folderId, String hasMore, String filename, String chunkIndex, String uploadId, { String? acceptLanguage, }) async {
    final response = await folderFileChunkUploadPathWithHttpInfo(folderId, hasMore, filename, chunkIndex, uploadId,  acceptLanguage: acceptLanguage, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }

  /// Folder file chunk upload
  ///
  /// Note: This method returns the HTTP [Response].
  ///
  /// Parameters:
  ///
  /// * [String] acceptLanguage:
  ///   Accepted language from client side
  Future<Response> folderFileGetChunkUploadIdPathWithHttpInfo({ String? acceptLanguage, }) async {
    // ignore: prefer_const_declarations
    final path = r'/api/v2/folder-files/chunk-upload-folder-file-init-upload-id';

    // ignore: prefer_final_locals
    Object? postBody;

    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{};
    final formParams = <String, String>{};

    if (acceptLanguage != null) {
      headerParams[r'Accept-Language'] = parameterToString(acceptLanguage);
    }

    const contentTypes = <String>[];


    return apiClient.invokeAPI(
      path,
      'POST',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  /// Folder file chunk upload
  ///
  /// Parameters:
  ///
  /// * [String] acceptLanguage:
  ///   Accepted language from client side
  Future<void> folderFileGetChunkUploadIdPath({ String? acceptLanguage, }) async {
    final response = await folderFileGetChunkUploadIdPathWithHttpInfo( acceptLanguage: acceptLanguage, );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
    }
  }
}
